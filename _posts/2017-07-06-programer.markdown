---
layout: post
title:  程序员间差距如何高达10倍
date:   2017-07-06
categories: blog
keywords: 程序员,程序员差异

---

10倍的差距并不是指敲代码的速度。而是完整的开发周期差异，敲代码仅占极少的时间。

程序员在公司的生命周期：

需求确认 - 设计 - 编码 - 测试 - 发布&维护 - 日常

 \\---------------------循环--------------------/

**需求阶段**

* 优秀程序员：
	1. 需求理解快，省去产品经理沟通时间。
	2. 对需求的做出符合预期的“补充”和“提醒”如：数据访问权限提醒，数据安全补充。
	3. 对不合理的需求会提出疑问，协助产品设计出更好的产品。
* 普通程序员：
	1. 需求理解慢，易解读错误，需要产品反复解释。
	2. 认为需求是产品经理的事情，没提就默认不做，出问题后再打补丁或返工。
	3. 对于不合理的需求，不敢提出反对意见。

**设计阶段**

* 优秀程序员：
	1. 设计简洁、优雅、无冗余、通俗易懂。
	2. 根据需求变更可能性和优先级，巧妙在通用性与时间做去舍，避免过度设计。
* 普通程序员：
	1. 无设计概念或过度设计，沉迷近期“学习”的技巧强行用于“实践”。

**编码阶段**

 * 优秀程序员：
	1. 擅于组织代码并利用命名、空格、行换符、代码局部排序。让代码易读、自我描述。
	2. 自测充分，减少QA工作量和BUG数量。
 * 普通程序员：
	1. 代码组织无序，没有好的编码习惯，命名随意风格不统一。用注释对代码进行描述。
	2. 自测时间较少，覆盖不全面，增加QA负担。

**测试阶段**

 * 优秀程序员：
	1. 对QA提出的BUG能够快速找到原因并修复，并解释BUG本质原因。让QA更容易理解程序员思维和BUG本质上的问题。
	2. 辅助QA分配各模块重点测试时间比例。
 * 普通程序员：
	1. 对于QA提出的BUG，只负责修复不负责解答。
	2. 修复BUG时间较长，耽搁QA时间。

**发布&维护**

  * 优秀程序员：
	1. 对于线上BUG能快速定位，通常80%以上的BUG能通过“直觉”准确找到BUG原因。
	2. 对线上数据增长敏感，能预知当前架构设计是否满足业务增长，提前预防做出调整。
  * 普通程序员：
	1. 线上BUG定位不准确，排查困难。
	2. 不关心数据增长。

**日常**

  * 优秀程序员：
	1. 利用间隙时间改善开发流程，偿还技术债。
  * 普通程序员：
	1. 无

以上各阶段是是乘积关系，若需求阶段出现问题，在测试阶段才发现。会浪费设计、编码的时间。所以程序员之间的差异可以是10倍以上的。
